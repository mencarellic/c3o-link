AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  c3o-link

Globals: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: python3.12

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: C3OLink
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: path
          AttributeType: S
      KeySchema:
        - AttributeName: path
          KeyType: HASH

  API:
    Type: AWS::Serverless::Api
    Properties:
      Name: C3O-Link
      Description: C3O Link API
      StageName: api
      AlwaysDeploy: true
      OpenApiVersion: "2.0"
      DisableExecuteApiEndpoint: true
      TracingEnabled: true
      DefinitionBody:
        swagger: "2.0"
        info:
          title:
            Ref: AWS::StackName
        paths:
          /:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations
              responses:
                default:
                  statusCode: "200"
          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations
              responses:
                default:
                  statusCode: "200"

      EndpointConfiguration:
        Type: REGIONAL
      Domain:
        DomainName: c3o.link
        CertificateArn: arn:aws:acm:us-west-2:888558876301:certificate/55f8944f-de7e-4a03-b073-4230b3222682
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: "*"
              Action: execute-api:Invoke
              Resource: execute-api:/*/*/*
  Function:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      Handler: app.lambda_handler
      CodeUri: c3o_link/
      Description: C3O Link function
      Architectures:
        - arm64
      Tracing: Active
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Events:
        BasePath:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /
            Method: ANY
        ProxyPath:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: PowertoolsC3OLink
          POWERTOOLS_METRICS_NAMESPACE: Powertools
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref Table
        - DynamoDBWritePolicy:
            TableName: !Ref Table
      Tags:
        LambdaPowertools: python

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
